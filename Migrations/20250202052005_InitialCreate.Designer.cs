// <auto-generated />
using System;
using FuelGo.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FuelGo.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20250202052005_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FuelGo.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("FuelGo.Models.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId", "Name")
                        .IsUnique();

                    b.ToTable("Centers");
                });

            modelBuilder.Entity("FuelGo.Models.CenterService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("Index")
                        .HasColumnType("int");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("CenterId", "NeighborhoodId")
                        .IsUnique();

                    b.ToTable("CenterServices");
                });

            modelBuilder.Entity("FuelGo.Models.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FuelGo.Models.ConstantDictionary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("Value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique();

                    b.ToTable("ConstantDictionaries");
                });

            modelBuilder.Entity("FuelGo.Models.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerApartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("Location_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("NeighborhoodId");

                    b.ToTable("CustomerApartments");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PlateNumber", "CustomerId")
                        .IsUnique();

                    b.ToTable("CustomerCars");
                });

            modelBuilder.Entity("FuelGo.Models.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("ShiftId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TruckId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("TruckId", "ShiftId")
                        .IsUnique()
                        .HasFilter("[TruckId] IS NOT NULL AND [ShiftId] IS NOT NULL");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("FuelGo.Models.FuelDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CenterId");

                    b.HasIndex("FuelTypeId", "CenterId")
                        .IsUnique();

                    b.ToTable("FuelDetails");
                });

            modelBuilder.Entity("FuelGo.Models.FuelType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("FuelTypes");
                });

            modelBuilder.Entity("FuelGo.Models.GasStation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("Location_Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NeighborhoodId", "Name")
                        .IsUnique();

                    b.ToTable("GasStations");
                });

            modelBuilder.Entity("FuelGo.Models.Neighborhood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CityId", "Name")
                        .IsUnique();

                    b.ToTable("Neighborhoods");
                });

            modelBuilder.Entity("FuelGo.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuthCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CustomerApartmentId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerCarId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<double?>("FinalPrice")
                        .HasColumnType("float");

                    b.Property<double?>("FinalQuantity")
                        .HasColumnType("float");

                    b.Property<int>("FuelTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsItUrgent")
                        .HasColumnType("bit");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<string>("LocationDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<int>("NeighborhoodId")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("OrderedQuantity")
                        .HasColumnType("float");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FuelTypeId");

                    b.HasIndex("NeighborhoodId");

                    b.HasIndex("StatusId");

                    b.HasIndex("CustomerApartmentId", "IsActive")
                        .IsUnique()
                        .HasFilter("[CustomerApartmentId] IS NOT NULL AND [IsActive] IS NOT NULL");

                    b.HasIndex("CustomerCarId", "IsActive")
                        .IsUnique()
                        .HasFilter("[CustomerCarId] IS NOT NULL AND [IsActive] IS NOT NULL");

                    b.HasIndex("DriverId", "IsActive")
                        .IsUnique()
                        .HasFilter("[DriverId] IS NOT NULL AND [IsActive] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("EndTime")
                        .HasColumnType("float");

                    b.Property<string>("HolidayDays")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShiftName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("StartTime")
                        .HasColumnType("float");

                    b.Property<string>("WorkingDays")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("FuelGo.Models.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusTypeId");

                    b.HasIndex("Name", "StatusTypeId")
                        .IsUnique();

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("FuelGo.Models.StatusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StatusTypes");
                });

            modelBuilder.Entity("FuelGo.Models.SystemAdmin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("SystemAdmins");
                });

            modelBuilder.Entity("FuelGo.Models.Truck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("CargoTankCapacity")
                        .HasColumnType("float");

                    b.Property<double>("CargoTankFullCapacity")
                        .HasColumnType("float");

                    b.Property<int>("CargoTankTypeId")
                        .HasColumnType("int");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int?>("DriverId")
                        .HasColumnType("int");

                    b.Property<double>("FuelTankCapacity")
                        .HasColumnType("float");

                    b.Property<double>("FuelTankFullCapacity")
                        .HasColumnType("float");

                    b.Property<int>("FuelTankTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Lat")
                        .HasColumnType("float");

                    b.Property<double>("Long")
                        .HasColumnType("float");

                    b.Property<string>("PlateNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CargoTankTypeId");

                    b.HasIndex("CenterId");

                    b.HasIndex("DriverId");

                    b.HasIndex("PlateNumber")
                        .IsUnique();

                    b.ToTable("Trucks");
                });

            modelBuilder.Entity("FuelGo.Models.TruckHandover", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdminId")
                        .HasColumnType("int");

                    b.Property<double>("CargoQuantity")
                        .HasColumnType("float");

                    b.Property<double>("CargoVarience")
                        .HasColumnType("float");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<double>("FuelQuantity")
                        .HasColumnType("float");

                    b.Property<double>("FuelVarience")
                        .HasColumnType("float");

                    b.Property<double>("Money")
                        .HasColumnType("float");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("DriverId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckHandovers");
                });

            modelBuilder.Entity("FuelGo.Models.TruckTankRefill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<int>("GasStationId")
                        .HasColumnType("int");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("QuantityCargoRefill")
                        .HasColumnType("float");

                    b.Property<double>("QuantityFuelRefill")
                        .HasColumnType("float");

                    b.Property<int>("TruckId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("GasStationId");

                    b.HasIndex("TruckId");

                    b.ToTable("TruckTankRefills");
                });

            modelBuilder.Entity("FuelGo.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("IsNotDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("JwtToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Email", "IsNotDeleted")
                        .IsUnique()
                        .HasFilter("[IsNotDeleted] IS NOT NULL");

                    b.HasIndex("Phone", "IsNotDeleted")
                        .IsUnique()
                        .HasFilter("[IsNotDeleted] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FuelGo.Models.Wallet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("FuelGo.Models.WalletTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("MadeBy")
                        .HasColumnType("int");

                    b.Property<int>("WalletId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MadeBy");

                    b.HasIndex("WalletId");

                    b.ToTable("WalletTransactions");
                });

            modelBuilder.Entity("FuelGo.Models.Admin", b =>
                {
                    b.HasOne("FuelGo.Models.Center", "Center")
                        .WithMany("Admins")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Status", "Status")
                        .WithMany("Admins")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("FuelGo.Models.Admin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelGo.Models.Center", b =>
                {
                    b.HasOne("FuelGo.Models.Neighborhood", "Neighborhood")
                        .WithMany("Centers")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("FuelGo.Models.CenterService", b =>
                {
                    b.HasOne("FuelGo.Models.Center", "Center")
                        .WithMany("CenterServices")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Neighborhood", "Neighborhood")
                        .WithMany("CenterServices")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("FuelGo.Models.Customer", b =>
                {
                    b.HasOne("FuelGo.Models.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("FuelGo.Models.Customer", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerApartment", b =>
                {
                    b.HasOne("FuelGo.Models.Customer", "Customer")
                        .WithMany("CustomerApartments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Neighborhood", "Neighborhood")
                        .WithMany("CustomerApartments")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerCar", b =>
                {
                    b.HasOne("FuelGo.Models.Customer", "Customer")
                        .WithMany("CustomerCars")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("FuelGo.Models.Driver", b =>
                {
                    b.HasOne("FuelGo.Models.Center", "Center")
                        .WithMany("Drivers")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Shift", "Shift")
                        .WithMany("Drivers")
                        .HasForeignKey("ShiftId");

                    b.HasOne("FuelGo.Models.Status", "Status")
                        .WithMany("Drivers")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Truck", "Truck")
                        .WithMany("Drivers")
                        .HasForeignKey("TruckId");

                    b.HasOne("FuelGo.Models.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("FuelGo.Models.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("Shift");

                    b.Navigation("Status");

                    b.Navigation("Truck");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelGo.Models.FuelDetail", b =>
                {
                    b.HasOne("FuelGo.Models.Center", "Center")
                        .WithMany("FuelDetails")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.FuelType", "FuelType")
                        .WithMany("FuelDetails")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Center");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("FuelGo.Models.GasStation", b =>
                {
                    b.HasOne("FuelGo.Models.Neighborhood", "Neighborhood")
                        .WithMany("GasStations")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Neighborhood");
                });

            modelBuilder.Entity("FuelGo.Models.Neighborhood", b =>
                {
                    b.HasOne("FuelGo.Models.City", "City")
                        .WithMany("Neighborhoods")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("FuelGo.Models.Order", b =>
                {
                    b.HasOne("FuelGo.Models.CustomerApartment", "CustomerApartment")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerApartmentId");

                    b.HasOne("FuelGo.Models.CustomerCar", "CustomerCar")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerCarId");

                    b.HasOne("FuelGo.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Driver", "Driver")
                        .WithMany("Orders")
                        .HasForeignKey("DriverId");

                    b.HasOne("FuelGo.Models.FuelType", "FuelType")
                        .WithMany("Orders")
                        .HasForeignKey("FuelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Neighborhood", "Neighborhood")
                        .WithMany("Orders")
                        .HasForeignKey("NeighborhoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Status", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerApartment");

                    b.Navigation("CustomerCar");

                    b.Navigation("Driver");

                    b.Navigation("FuelType");

                    b.Navigation("Neighborhood");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("FuelGo.Models.Status", b =>
                {
                    b.HasOne("FuelGo.Models.StatusType", "StatusType")
                        .WithMany("Statuses")
                        .HasForeignKey("StatusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StatusType");
                });

            modelBuilder.Entity("FuelGo.Models.SystemAdmin", b =>
                {
                    b.HasOne("FuelGo.Models.User", "User")
                        .WithOne("SystemAdmin")
                        .HasForeignKey("FuelGo.Models.SystemAdmin", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelGo.Models.Truck", b =>
                {
                    b.HasOne("FuelGo.Models.FuelType", "FuelType")
                        .WithMany("Trucks")
                        .HasForeignKey("CargoTankTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Center", "Center")
                        .WithMany("Trucks")
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Driver", "Driver")
                        .WithMany("Trucks")
                        .HasForeignKey("DriverId");

                    b.Navigation("Center");

                    b.Navigation("Driver");

                    b.Navigation("FuelType");
                });

            modelBuilder.Entity("FuelGo.Models.TruckHandover", b =>
                {
                    b.HasOne("FuelGo.Models.Admin", "Admin")
                        .WithMany("TruckHandovers")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Driver", "Driver")
                        .WithMany("TruckHandovers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Truck", "Truck")
                        .WithMany("TruckHandovers")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("Driver");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FuelGo.Models.TruckTankRefill", b =>
                {
                    b.HasOne("FuelGo.Models.Driver", "Driver")
                        .WithMany("TruckTankRefills")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.GasStation", "GasStation")
                        .WithMany("TruckTankRefills")
                        .HasForeignKey("GasStationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Truck", "Truck")
                        .WithMany("TruckTankRefills")
                        .HasForeignKey("TruckId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("GasStation");

                    b.Navigation("Truck");
                });

            modelBuilder.Entity("FuelGo.Models.Wallet", b =>
                {
                    b.HasOne("FuelGo.Models.User", "User")
                        .WithOne("Wallet")
                        .HasForeignKey("FuelGo.Models.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FuelGo.Models.WalletTransaction", b =>
                {
                    b.HasOne("FuelGo.Models.User", "User")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("MadeBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FuelGo.Models.Wallet", "Wallet")
                        .WithMany("WalletTransactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("FuelGo.Models.Admin", b =>
                {
                    b.Navigation("TruckHandovers");
                });

            modelBuilder.Entity("FuelGo.Models.Center", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("CenterServices");

                    b.Navigation("Drivers");

                    b.Navigation("FuelDetails");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("FuelGo.Models.City", b =>
                {
                    b.Navigation("Neighborhoods");
                });

            modelBuilder.Entity("FuelGo.Models.Customer", b =>
                {
                    b.Navigation("CustomerApartments");

                    b.Navigation("CustomerCars");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerApartment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.CustomerCar", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.Driver", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("TruckHandovers");

                    b.Navigation("TruckTankRefills");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("FuelGo.Models.FuelType", b =>
                {
                    b.Navigation("FuelDetails");

                    b.Navigation("Orders");

                    b.Navigation("Trucks");
                });

            modelBuilder.Entity("FuelGo.Models.GasStation", b =>
                {
                    b.Navigation("TruckTankRefills");
                });

            modelBuilder.Entity("FuelGo.Models.Neighborhood", b =>
                {
                    b.Navigation("CenterServices");

                    b.Navigation("Centers");

                    b.Navigation("CustomerApartments");

                    b.Navigation("GasStations");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.Shift", b =>
                {
                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("FuelGo.Models.Status", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Drivers");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FuelGo.Models.StatusType", b =>
                {
                    b.Navigation("Statuses");
                });

            modelBuilder.Entity("FuelGo.Models.Truck", b =>
                {
                    b.Navigation("Drivers");

                    b.Navigation("TruckHandovers");

                    b.Navigation("TruckTankRefills");
                });

            modelBuilder.Entity("FuelGo.Models.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("Driver")
                        .IsRequired();

                    b.Navigation("SystemAdmin")
                        .IsRequired();

                    b.Navigation("Wallet")
                        .IsRequired();

                    b.Navigation("WalletTransactions");
                });

            modelBuilder.Entity("FuelGo.Models.Wallet", b =>
                {
                    b.Navigation("WalletTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
